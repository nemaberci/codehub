@startuml Micro Service commponents
title Micro services

skinparam Linetype polyline

folder "MicroServices" {
    node "User" as user #LightSalmon
    node "Submitted Solution" as solution #LightSalmon
    node "Uploaded Challenge" as challenge #LightSalmon
    node "Solution evaluator" as evaluator #LightSalmon
    node "Notification publisher" as notification #LightSalmon
}

cloud {
    cloud "Message queue" as mq #LightCyan
    database "File storage" {
        [Cloud Storage] as storage #LightCyan
    }
    database "Structured storage" {
        [Cloud SQL] as db #LightCyan
    }
    [Solution builder] as builder #LightSalmon
    [Challenge control solution builder] as controlSolutionBuilder #LightSalmon
    [Challenge input generator builder] as inputGeneratorBuilder #LightSalmon
    [Challenge output verifier builder] as outputVerifierBuilder #LightSalmon
    [Solution runner] as runner #LightSalmon
}

solution .up.|> user : depends on
challenge .up.|> user : depends on
evaluator .up.|> solution : depends on
notification .up.|> evaluator: depends on
solution .left.|> challenge : depends on


builder -left-> mq : R/W
runner -right-> mq : R/W
solution --> mq : W
notification --> mq : R
controlSolutionBuilder -up-> mq : R/W
inputGeneratorBuilder -up-> mq : R/W
outputVerifierBuilder -up-> mq : R/W
challenge -down-> mq : W


builder -down-> storage: R/W
runner -down-> storage : R/W
controlSolutionBuilder -down-> storage: R/W
inputGeneratorBuilder -down-> storage: R/W
outputVerifierBuilder -down-> storage: R/W
challenge -down-> storage: W
solution -down-> storage : W


solution -down-> db : R/W
challenge -down-> db: R/W
user -down-> db: R/W


legend top left
|  **Color**  |  **Purpose**  |
|  <#LightCyan>  |  Google Cloud provided solutions  |
|  <#LightSalmon>  |  Own services  |

|  **Abbreviation**  |  **Meaning**  |
|  R  |  Reads data  |
|  W  |  Writes data  |
|  R/W  |  Reads and writes data  |
endlegend

@enduml